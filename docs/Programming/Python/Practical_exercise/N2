# 📦 ყუთისა და წრის ფართობის გამოთვლა — ახსნა და კოდი

## 🔹 შესავალი

ყუთი (ან კუბოიდი) არის სამგანზომილებიანი ფიგურა, რომელსაც აქვს:
- **სიგანე (width)**  
- **სიმაღლე (height)**  
- **სიღრმე (depth)**  

ჩვენ გვინდა გამოვთვალოთ:
- ყუთის **მთლიანი ზედაპირის ფართობი**  
- ყუთის **მოცულობა**  
- და შემდეგ **წრის ფართობი**, რადიუსის მიხედვით.

---

## 🔹 ყუთის გვერდები და ზედაპირის ფორმულა

ყუთს აქვს 6 ზედაპირი —  
სამი წყვილი ერთმანეთის ტოლი მართკუთხედია:

| ზედაპირის წყვილი | ზომები | თითოეულის ფართობი | წყვილის საერთო ფართობი |
|-------------------|--------|--------------------|--------------------------|
| წინა და უკანა     | width × height | w × h | 2 × (w × h) |
| ზედა და ქვედა    | width × depth  | w × d | 2 × (w × d) |
| მარცხენა და მარჯვენა | height × depth | h × d | 2 × (h × d) |

---

## 🔹 საერთო ფორმულა

თუ ყველა ზედაპირის ფართობს შევკრებთ:

\[
S = 2(w \times h) + 2(w \times d) + 2(h \times d)
\]

შეგვიძლია 2 გამოვიტანოთ საერთო გამყოფად:

\[
S = 2 \times (w \times h + w \times d + h \times d)
\]

👉 ეს არის სწორედ ის ფორმულა, რაც გამოყენებულია Python კოდში:

```python
surface_area = 2 * (width * height + width * depth + height * depth)
```

---

## 🔹 ASCII დიაგრამა

```
          +------------------+         ↑ height (h)
         /|                 /|        
        / |                / |        
       *--+---------------*  |        → width (w)
       |  |               |  |
       |  +---------------|--+
       | /                | /         
       |/                 |/          
       *------------------*           
                ↑
              depth (d)
```

---

## 🔹 მაგალითი

თუ:
```
width = 3
height = 4
depth = 5
```

მაშინ:
\[
S = 2 × (3×4 + 3×5 + 4×5)
\]
\[
S = 2 × (12 + 15 + 20) = 2 × 47 = 94
\]

📘 **ყუთის ზედაპირის ფართობი = 94 ერთეული²**

---

## 🔹 წრის ფართობის ფორმულა

წრის ფართობის ფორმულა არის:

\[
S = π \times r^2
\]

მაგალითად:
```
radius = 2
S = 3.1416 × 2² = 12.5664
```

👉 ანუ **წრის ფართობი ≈ 12.57 ერთეული²**

---

## 💻 კოდი — ფუნქციის გარეშე

```python
import math

# ყუთის გამოთვლა
print("📦 Box calculations")
width = float(input("Enter box width: "))
height = float(input("Enter box height: "))
depth = float(input("Enter box depth: "))

surface_area = 2 * (width * height + width * depth + height * depth)
volume = width * height * depth

print(f"Box surface area: {surface_area:.2f}")
print(f"Box volume: {volume:.2f}")

# წრის გამოთვლა
print("\n⚪ Circle calculation")
radius = float(input("Enter circle radius: "))

circle_area = math.pi * radius ** 2

print(f"Circle area: {circle_area:.2f}")
```

---

## 💻 კოდი — ფუნქციით

```python
import math

# ყუთის გამოთვლის ფუნქცია
def box_properties(width, height, depth):
    surface_area = 2 * (width * height + width * depth + height * depth)
    volume = width * height * depth
    return surface_area, volume

# წრის ფართობის ფუნქცია
def circle_area(radius):
    return math.pi * radius ** 2

# --- მომხმარებლის შეყვანა ---
print("📦 Box calculations")
w = float(input("Enter box width: "))
h = float(input("Enter box height: "))
d = float(input("Enter box depth: "))

surface, volume = box_properties(w, h, d)
print(f"Box surface area: {surface:.2f}")
print(f"Box volume: {volume:.2f}")

print("\n⚪ Circle calculation")
r = float(input("Enter circle radius: "))
area = circle_area(r)
print(f"Circle area: {area:.2f}")
```

---

## 🧩 შედეგის მაგალითი

**შეყვანა:**
```
Enter box width: 3
Enter box height: 4
Enter box depth: 5
Enter circle radius: 2
```

**შედეგი:**
```
Box surface area: 94.00
Box volume: 60.00
Circle area: 12.57
```

---

_დასრულებულია ✅ — ახლა უკვე იცი როგორ გამოთვალო ყუთისა და წრის ფართობები ფუნქციით და ფუნქციის გარეშე!_



# 🔺 სამკუთხედი — ჰიპოტენუზის გამოთვლა და კატეგორიზაცია

## 🔹 ამოცანის აღწერა

მომხმარებელი შეიყვანს **სამკუთხედი კათეტების ზომებს**:  
- პირველი კათეტი: `a`  
- მეორე კათეტი: `b`  

პროდუქტი უნდა გამოთვალოს **ჰიპოტენუზა (c)** პითაგორას თეორემით:

\[
c = \sqrt{a^2 + b^2}
\]

- შედეგი უნდა **დამრგვალდეს ორ ათწილამდე** (`round()`).  
- შემდეგ პროგრამა უნდა დაბეჭდოს თუ ეს **„დიდი სამკუთხედი“**ა თუ **„პატარა სამკუთხედი“**:  
  - თუ `c > 50` → დიდი სამკუთხედი 🏔️  
  - თუ `c ≤ 50` → პატარა სამკუთხედი 🔺

---

## 💻 Python კოდი — ფუნქციის გარეშე

```python
# სამკუთხედი ჰიპოტენუზის გამოთვლა
print("გამოთვალე სამკუთხედი ჰიპოტენუზა!")

# მომხმარებლისგან კათეტების შეყვანა
a = float(input("შეიყვანე პირველი კათეტი: "))
b = float(input("შეიყვანე მეორე კათეტი: "))

# ჰიპოტენუზის გამოთვლა პითაგორას თეორემით
hypotenuse = (a**2 + b**2) ** 0.5

# შედეგის დამრგვალება ორ ათწილამდე
hypotenuse = round(hypotenuse, 2)

print(f"სამკუთხედი ჰიპოტენუზა არის: {hypotenuse}")

# შემოწმება — დიდი თუ პატარა სამკუთხედი
if hypotenuse > 50:
    print("ეს არის დიდი სამკუთხედი 🏔️")
else:
    print("ეს არის პატარა სამკუთხედი 🔺")
```

---

## 🔹 მაგალითი

**შეყვანა:**
```
შეიყვანე პირველი კათეტი: 30
შეიყვანე მეორე კათეტი: 40
```

**შედეგი:**
```
სამკუთხედი ჰიპოტენუზა არის: 50.0
ეს არის პატარა სამკუთხედი 🔺
```

**შეყვანა:**
```
შეიყვანე პირველი კათეტი: 35
შეიყვანე მეორე კათეტი: 40
```

**შედეგი:**
```
სამკუთხედი ჰიპოტენუზა არის: 53.85
ეს არის დიდი სამკუთხედი 🏔️
```




```markdown
# პარალელეპიპედის მოცულობა და პერიმეტრი

```python
# მომხმარებლისგან შევიყვანოთ პარალელეპიპედის ზომები
length = float(input("შეიყვანეთ სიგრძე: "))
width  = float(input("შეიყვანეთ სიგანე: "))
height = float(input("შეიყვანეთ სიმაღლე: "))

# მოცულობის გამოთვლა
volume = length * width * height

# პერიმეტრის გამოთვლა (12 ნაპირი)
perimeter = 4 * (length + width + height)

# მოცულობის დამრგვალება 3 ათწილადამდე
rounded_volume = round(volume, 3)

# შედეგების გამოტანა
print(f"მოცულობა: {rounded_volume}")

if rounded_volume > 50:
    print("ეს არის დიდი პარალელეპიპედი")
else:
    print("ეს არის პატარა პარალელეპიპედი")

print(f"პერიმეტრი: {perimeter}")
```

## ახსნა

| ფორმულა | აღწერა |
|----------|--------|
| **მოცულობა** = `length × width × height` | სამი განზომილების ნამრავლი |
| **პერიმეტრი** = `4 × (length + width + height)` | 12 ნაპირის ჯამი |
| **დამრგვალება** | `round(volume, 3)` – 3 ათწილადი |

### მაგალითი
```
შეიყვანეთ სიგრძე: 3
შეიყვანეთ სიგანე: 4
შეიყვანეთ სიმაღლე: 5
მოცულობა: 60.000
ეს არის დიდი პარალელეპიპედი
პერიმეტრი: 48.0
```

---
